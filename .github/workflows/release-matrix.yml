# =====================================================================
# SDL Multi‑Platform Build Workflow (Linux + Windows)
# ---------------------------------------------------------------------
# Maintenance Notes:
# - Target OS: Ubuntu 24.04 "Noble Numbat" (Linux builds) + Windows Server 2022 (Windows builds)
# - Last verified: 2025‑09‑11
# - Known quirks (Linux):
#   * Multi‑arch libglib2.0-dev resolution bug on Noble runners
#     (see: https://github.com/actions/runner-images/issues/12091)
#   * liburing-dev is NOT available for i386 on Noble
#   * CMake feature detection for IBus/io_uring in cross‑builds
#     requires both -dev and runtime packages for the target arch
#   * i386 build with -m32 requires gcc/g++ multilib to link
# - Workarounds (Linux):
#   * apt-mark hold critical packages before installing multi‑arch deps
#   * Install Vulkan dev packages to help apt resolve GLib deps
#   * Skip liburing for i386
#   * Install both runtime + dev for IBus/io_uring on ARM
# =====================================================================

name: Release (multi-arch)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version tag (e.g., v1.2.3). If empty, a timestamped tag is used."
        required: false

permissions:
  contents: write

jobs:
  # ===================================================================
  # 0. Mirror upstream and re-apply custom workflow files
  # ===================================================================
  mirror:
    name: Mirror upstream and re-apply custom files
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upstream_sha: ${{ steps.getsha.outputs.sha }}
    steps:
      # --------------------------------------------------------------
      # 1. Checkout your fork's default branch
      # --------------------------------------------------------------
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          ref: main
          persist-credentials: false

      # --------------------------------------------------------------
      # 2. Add and fetch upstream
      # --------------------------------------------------------------
      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/libsdl-org/SDL.git
          git fetch upstream main

      # --------------------------------------------------------------
      # 3. Record upstream commit SHA for release notes
      # --------------------------------------------------------------
      - name: Get upstream commit SHA
        id: getsha
        run: |
          SHA=$(git rev-parse upstream/main)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      # --------------------------------------------------------------
      # 4. Hard reset to upstream/main
      # --------------------------------------------------------------
      - name: Reset to upstream/main
        run: |
          git reset --hard upstream/main

      # --------------------------------------------------------------
      # 5. Remove all upstream workflow files so they are never staged
      # --------------------------------------------------------------
      - name: Remove upstream workflows
        run: |
          rm -f .github/workflows/*

      # --------------------------------------------------------------
      # 6. Check out workflow-customizations branch in a temp dir
      # --------------------------------------------------------------
      - name: Fetch workflow-customizations branch
        run: |
          git fetch origin workflow-customizations:workflow-customizations
          mkdir ../customs
          git --work-tree=../customs checkout workflow-customizations -- .

      # --------------------------------------------------------------
      # 7. Copy custom files into working tree
      # --------------------------------------------------------------
      - name: Re-apply custom files
        run: |
          cp -r ../customs/.github .
          cp ../customs/.gitattributes .

      # --------------------------------------------------------------
      # 8. Commit and push (force to overwrite remote main)
      # --------------------------------------------------------------
      - name: Commit and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .github .gitattributes
          git commit -m "Mirror from upstream @ ${{ steps.getsha.outputs.sha }} + re-apply workflow files" || echo "No changes to commit"
          git push --force "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git" HEAD:main

  # ===================================================================
  # 1. Build (Linux)
  # ===================================================================
  build_linux:
    name: Build ${{ matrix.rid }} (Linux)
    runs-on: ubuntu-latest
    needs: mirror
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          # ----------------------------------------------------------
          # Native amd64 build — no cross-arch setup needed
          # ----------------------------------------------------------
          - rid: linux-x64
            cc: gcc-14
            cxx: g++-14
            apt_arch: ""
            arch_pkgs: ""
            arch_setup: ""
            cmake_args: ""

          # ----------------------------------------------------------
          # 32-bit x86 build — runs on amd64 host with -m32
          # Needs multilib toolchain and 32-bit libs to link successfully.
          # ----------------------------------------------------------
          - rid: linux-x86
            cc: gcc-14
            cxx: g++-14
            apt_arch: "i386"
            arch_pkgs: "libc6-dev-i386 linux-libc-dev:i386 libstdc++-14-dev:i386 gcc-14-multilib g++-14-multilib"
            arch_setup: |
              sudo dpkg --add-architecture i386
              sudo apt-get update
            cmake_args: "-DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32"

          # ----------------------------------------------------------
          # ARM64 cross-build
          # ----------------------------------------------------------
          - rid: linux-arm64
            cc: aarch64-linux-gnu-gcc-14
            cxx: aarch64-linux-gnu-g++-14
            apt_arch: "arm64"
            arch_pkgs: "libc6-dev-arm64-cross linux-libc-dev-arm64-cross"
            arch_setup: |
              sudo dpkg --add-architecture arm64
              if [ -f /etc/apt/sources.list.d/ubuntu.sources ]; then
                sudo mv /etc/apt/sources.list.d/ubuntu.sources /etc/apt/sources.list.d/ubuntu.sources.disabled
              fi
              sudo tee /etc/apt/sources.list >/dev/null <<'EOF'
              deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble main restricted universe multiverse
              deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble-updates main restricted universe multiverse
              deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble-backports main restricted universe multiverse
              deb [arch=amd64] http://security.ubuntu.com/ubuntu noble-security main restricted universe multiverse
              EOF
              sudo tee /etc/apt/sources.list.d/arm64.list >/dev/null <<'EOF'
              deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble main restricted universe multiverse
              deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-updates main restricted universe multiverse
              deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-backports main restricted universe multiverse
              deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-security main restricted universe multiverse
              EOF
              sudo apt-get update
            cmake_args: "-DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=aarch64"

          # ----------------------------------------------------------
          # ARM32 (armhf) cross-build
          # ----------------------------------------------------------
          - rid: linux-arm
            cc: arm-linux-gnueabihf-gcc-14
            cxx: arm-linux-gnueabihf-g++-14
            apt_arch: "armhf"
            arch_pkgs: "libc6-dev-armhf-cross linux-libc-dev-armhf-cross"
            arch_setup: |
              sudo dpkg --add-architecture armhf
              if [ -f /etc/apt/sources.list.d/ubuntu.sources ]; then
                sudo mv /etc/apt/sources.list.d/ubuntu.sources /etc/apt/sources.list.d/ubuntu.sources.disabled
              fi
              sudo tee /etc/apt/sources.list >/dev/null <<'EOF'
              deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble main restricted universe multiverse
              deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble-updates main restricted universe multiverse
              deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble-backports main restricted universe multiverse
              deb [arch=amd64] http://security.ubuntu.com/ubuntu noble-security main restricted universe multiverse
              EOF
              sudo tee /etc/apt/sources.list.d/armhf.list >/dev/null <<'EOF'
              deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports noble main restricted universe multiverse
              deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports noble-updates main restricted universe multiverse
              deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports noble-backports main restricted universe multiverse
              deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports noble-security main restricted universe multiverse
              EOF
              sudo apt-get update
            cmake_args: "-DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=arm"

    env:
      BUILD_TYPE: Release
      PACKAGE_DIR: ${{ github.workspace }}/package
      SUCCESS_DIR: ${{ github.workspace }}/success

    steps:
      # --------------------------------------------------------------
      # 1. Checkout source code
      # --------------------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      # --------------------------------------------------------------
      # 2. Install specific CMake version
      # --------------------------------------------------------------
      - name: Install CMake 3.30.0
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.30.0'

      # --------------------------------------------------------------
      # 3. Setup architecture (dpkg --add-architecture, apt sources)
      # --------------------------------------------------------------
      - name: Setup architecture
        run: ${{ matrix.arch_setup }}
        shell: bash

      # --------------------------------------------------------------
      # 4. Hold critical packages to avoid removal during multi-arch installs
      #    Workaround for runner-images bug:
      #    https://github.com/actions/runner-images/issues/12091
      # --------------------------------------------------------------
      - name: Hold critical packages to avoid removal
        run: |
          sudo apt-mark hold grub-common grub-efi-amd64-bin python3 python3-apt shim-signed

      # --------------------------------------------------------------
      # 5. Install build dependencies (native + target-arch)
      # --------------------------------------------------------------
      - name: Install build dependencies (native + target-arch)
        shell: bash
        run: |
          set -euo pipefail
          ARCH="${{ matrix.apt_arch }}"
          SUF=""
          if [ -n "$ARCH" ]; then SUF=":$ARCH"; fi

          sudo apt-get update

          # ------------------------------------------------------------
          # Common host‑arch build dependencies
          # ------------------------------------------------------------
          sudo apt-get install -y \
            build-essential git make pkg-config ninja-build gnome-desktop-testing \
            libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev \
            libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev \
            libxi-dev libxss-dev libxtst-dev libxkbcommon-dev libdrm-dev libgbm-dev \
            libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev \
            libudev-dev libpipewire-0.3-dev libwayland-dev libdecor-0-dev \
            libusb-1.0-0-dev libunwind-dev \
            gcc-14 g++-14 \
            gcc-14-aarch64-linux-gnu g++-14-aarch64-linux-gnu \
            gcc-14-arm-linux-gnueabihf g++-14-arm-linux-gnueabihf \
            libglib2.0-dev libvulkan-dev \
            libibus-1.0-dev libibus-1.0-5 \
            liburing-dev liburing2

          # ------------------------------------------------------------
          # Install any arch‑specific toolchain headers/libs from matrix
          # ------------------------------------------------------------
          if [ -n "${{ matrix.arch_pkgs }}" ]; then
            sudo apt-get install -y ${{ matrix.arch_pkgs }}
          fi

          # ------------------------------------------------------------
          # Cross‑arch target dependencies
          # ------------------------------------------------------------
          if [ -n "$ARCH" ]; then
            PKGS="\
              libxml2$SUF \
              libasound2-dev$SUF libpulse-dev$SUF libaudio-dev$SUF libjack-dev$SUF libsndio-dev$SUF \
              libx11-dev$SUF libxext-dev$SUF libxrandr-dev$SUF libxcursor-dev$SUF libxfixes-dev$SUF \
              libxi-dev$SUF libxss-dev$SUF libxtst-dev$SUF libxkbcommon-dev$SUF libdrm-dev$SUF \
              libgbm-dev$SUF libgl1-mesa-dev$SUF libgles2-mesa-dev$SUF libegl1-mesa-dev$SUF \
              libdbus-1-dev$SUF libudev-dev$SUF libpipewire-0.3-dev$SUF libwayland-dev$SUF \
              libdecor-0-dev$SUF libusb-1.0-0-dev$SUF libunwind-dev$SUF \
              libglib2.0-dev$SUF libvulkan-dev$SUF \
              libibus-1.0-dev$SUF libibus-1.0-5$SUF"

            if [ "$ARCH" != "i386" ]; then
              PKGS="$PKGS liburing-dev$SUF liburing2$SUF"
            fi

            sudo apt-get install -y $PKGS
            dpkg -l | egrep 'lib(ibus|glib|uring|vulkan)|gcc-14|g\+\+-14' || true
          fi

          # ------------------------------------------------------------
          # Special handling for i386 build
          # ------------------------------------------------------------
          if [ "$ARCH" = "i386" ]; then
            echo 'int main(void){return 0;}' | gcc-14 -m32 -x c - -o /tmp/t32
            file /tmp/t32 || true
          fi

      # --------------------------------------------------------------
      # 6. Configure CMake for the build
      # --------------------------------------------------------------
      - name: Configure CMake
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_C_COMPILER=${{ matrix.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
            ${{ matrix.cmake_args }} \
            -DSDL_SHARED=ON -DSDL_STATIC=OFF \
            -DSDL_TESTS=OFF -DSDL_EXAMPLES=OFF -DSDL_INSTALL_DOCS=FALSE

      # --------------------------------------------------------------
      # 7. Build SDL
      # --------------------------------------------------------------
      - name: Build
        run: cmake --build build --config $BUILD_TYPE

      # --------------------------------------------------------------
      # 8. Copy built library to package dir and mark success
      # --------------------------------------------------------------
      - name: Copy library and mark success
        run: |
          mkdir -p "$PACKAGE_DIR/runtimes/${{ matrix.rid }}/native"
          libfile=$(find build -type f -name "libSDL3.so.*" | sort -V | tail -n 1)
          if [ -z "$libfile" ]; then
            libfile=$(find build -type f -name "libSDL3.so" | head -n 1)
          fi
          if [ -z "$libfile" ]; then
            echo "WARNING: libSDL3.so not found for RID ${{ matrix.rid }}. Skipping."
            exit 0
          fi
          cp "$libfile" "$PACKAGE_DIR/runtimes/${{ matrix.rid }}/native/libSDL3.so"
          mkdir -p "$SUCCESS_DIR"
          echo "${{ matrix.rid }}" > "$SUCCESS_DIR/${{ matrix.rid }}.txt"

      # --------------------------------------------------------------
      # 9. Upload built binary as artifact
      # --------------------------------------------------------------
      - name: Upload artifact (binary)
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: package/runtimes/${{ matrix.rid }}
          if-no-files-found: ignore

      # --------------------------------------------------------------
      # 10. Upload success marker as artifact
      # --------------------------------------------------------------
      - name: Upload artifact (success marker)
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: success-${{ matrix.rid }}
          path: success/${{ matrix.rid }}.txt
          if-no-files-found: ignore

  # ===================================================================
  # 2. Build (Windows)
  # ===================================================================
  build_windows:
    name: Build ${{ matrix.rid }} (Windows)
    runs-on: windows-latest
    needs: mirror
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          # ----------------------------------------------------------
          # Native x64 build
          # ----------------------------------------------------------
          - rid: win-x64
            arch: x64
            generator: "Visual Studio 17 2022"

          # ----------------------------------------------------------
          # Native x86 build
          # ----------------------------------------------------------
          - rid: win-x86
            arch: Win32
            generator: "Visual Studio 17 2022"

          # ----------------------------------------------------------
          # ARM64 build
          # ----------------------------------------------------------
          - rid: win-arm64
            arch: ARM64
            generator: "Visual Studio 17 2022"

    env:
      BUILD_TYPE: Release
      PACKAGE_DIR: ${{ github.workspace }}\package
      SUCCESS_DIR: ${{ github.workspace }}\success

    steps:
      # --------------------------------------------------------------
      # 1. Checkout source code
      # --------------------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      # --------------------------------------------------------------
      # 2. Install specific CMake version (if needed)
      # --------------------------------------------------------------
      - name: Install CMake 3.30.0
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.30.0'

      # --------------------------------------------------------------
      # 3. Configure CMake for the build
      # --------------------------------------------------------------
      - name: Configure CMake
        run: |
          cmake -S . -B build -G "${{ matrix.generator }}" -A ${{ matrix.arch }} `
            -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE `
            -DSDL_SHARED=ON -DSDL_STATIC=OFF `
            -DSDL_TESTS=OFF -DSDL_EXAMPLES=OFF -DSDL_INSTALL_DOCS=FALSE
        shell: pwsh

      # --------------------------------------------------------------
      # 4. Build SDL
      # --------------------------------------------------------------
      - name: Build
        run: cmake --build build --config $env:BUILD_TYPE
        shell: pwsh

      # --------------------------------------------------------------
      # 5. Copy built DLL to package dir and mark success
      # --------------------------------------------------------------
      - name: Copy library and mark success
        run: |
          New-Item -ItemType Directory -Force -Path "$env:PACKAGE_DIR\runtimes\${{ matrix.rid }}\native" | Out-Null
          $dllFile = Get-ChildItem -Path build -Recurse -Filter "SDL3.dll" | Select-Object -First 1
          if (-not $dllFile) {
            Write-Warning "SDL3.dll not found for RID ${{ matrix.rid }}. Skipping."
            exit 0
          }
          Copy-Item $dllFile.FullName "$env:PACKAGE_DIR\runtimes\${{ matrix.rid }}\native\SDL3.dll"
          New-Item -ItemType Directory -Force -Path "$env:SUCCESS_DIR" | Out-Null
          "${{ matrix.rid }}" | Out-File -FilePath "$env:SUCCESS_DIR\${{ matrix.rid }}.txt" -Encoding ascii
        shell: pwsh

      # --------------------------------------------------------------
      # 6. Upload built binary as artifact
      # --------------------------------------------------------------
      - name: Upload artifact (binary)
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rid }}
          path: package/runtimes/${{ matrix.rid }}
          if-no-files-found: ignore

      # --------------------------------------------------------------
      # 7. Upload success marker as artifact
      # --------------------------------------------------------------
      - name: Upload artifact (success marker)
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: success-${{ matrix.rid }}
          path: success/${{ matrix.rid }}.txt
          if-no-files-found: ignore

  # ===================================================================
  # 3. Package & Release (Linux + Windows)
  # ===================================================================
  package_and_release:
    name: Package all builds and create release
    runs-on: windows-latest
    needs: [mirror, build_linux, build_windows]
    if: always()
    env:
      ARTIFACTS_DIR: ${{ github.workspace }}\artifacts

    steps:
      # --------------------------------------------------------------
      # 1. Download all artifacts from both build jobs
      # --------------------------------------------------------------
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts_download

      # --------------------------------------------------------------
      # 2. Create combined runtimes folder
      # --------------------------------------------------------------
      # Each artifact folder is named after its RID and contains:
      #   native/<library file>
      # We create runtimes/<rid>/native/ and copy the native folder in.
      # --------------------------------------------------------------
      - name: Create combined runtimes folder
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "runtimes" | Out-Null
          Get-ChildItem -Path "artifacts_download" -Directory | ForEach-Object {
            $rid = $_.Name
            if (Test-Path "$($_.FullName)\native") {
              New-Item -ItemType Directory -Force -Path "runtimes\$rid" | Out-Null
              Copy-Item -Recurse -Force "$($_.FullName)\native" "runtimes\$rid\"
            }
          }

      # --------------------------------------------------------------
      # 3. Zip the combined runtimes folder
      # --------------------------------------------------------------
      - name: Create combined zip
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "$env:ARTIFACTS_DIR" | Out-Null
          Compress-Archive -Path "runtimes" -DestinationPath "$env:ARTIFACTS_DIR\runtimes.zip" -Force

      # --------------------------------------------------------------
      # 4. Gather succeeded RIDs from success markers
      # --------------------------------------------------------------
      - name: Gather succeeded RIDs
        id: gather
        shell: pwsh
        run: |
          $successFiles = Get-ChildItem -Path "artifacts_download" -Recurse -Filter "*.txt"
          if ($successFiles.Count -eq 0) {
            $list = "None"
          } else {
            $list = ($successFiles | Get-Content) -join ", "
          }
          "list=$list" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      # --------------------------------------------------------------
      # 5. Compute release tag/version
      # --------------------------------------------------------------
      - name: Compute tag/version
        id: tag
        shell: pwsh
        run: |
          if ([string]::IsNullOrEmpty("${{ github.event.inputs.version }}")) {
            $semver = (Get-Date -Format "yyyyMMdd-HHmmss")
          } else {
            $semver = "${{ github.event.inputs.version }}"
          }
          $tag = "v$semver"
          "semver=$semver" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8
          "tag=$tag"       | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      # --------------------------------------------------------------
      # 6. Create or update the GitHub release
      # --------------------------------------------------------------
      # Release body format:
      # Based on: <stub for now>
      # Included runtimes: <comma-and-space-separated list>
      # --------------------------------------------------------------
      - name: Create or update release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ${{ steps.tag.outputs.semver }}
          draft: false
          prerelease: false
          body: |
            Based on: https://github.com/libsdl-org/SDL/commit/${{ needs.mirror.outputs.upstream_sha }}
            Included runtimes: ${{ steps.gather.outputs.list }}
          files: |
            ${{ env.ARTIFACTS_DIR }}\runtimes.zip
